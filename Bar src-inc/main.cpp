#include <iostream>
#include "Cbar.h"
#include "unit.h"

using namespace std;



int main()
{
	// 64 éléments matricielle
/*
	double tilts[16] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double notch[16] = {1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double pos[16] = {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};

	double xP[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	double yP[64] = {3.15,
					3.15,
					3.15,
					3.15,
					3.15,
					3.15,
					3.15,
					3.15,
					2.25,
					2.25,
					2.25,
					2.25,
					2.25,
					2.25,
					2.25,
					2.25,
					1.35,
					1.35,
					1.35,
					1.35,
					1.35,
					1.35,
					1.35,
					1.35,
					0.45,
					0.45,
					0.45,
					0.45,
					0.45,
					0.45,
					0.45,
					0.45,
					-0.45,
					-0.45,
					-0.45,
					-0.45,
					-0.45,
					-0.45,
					-0.45,
					-0.45,
					-1.35,
					-1.35,
					-1.35,
					-1.35,
					-1.35,
					-1.35,
					-1.35,
					-1.35,
					-2.25,
					-2.25,
					-2.25,
					-2.25,
					-2.25,
					-2.25,
					-2.25,
					-2.25,
					-3.15,
					-3.15,
					-3.15,
					-3.15,
					-3.15,
					-3.15,
					-3.15,
					-3.15};

double zP[64] = {3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15,
					3.15,
					2.25,
					1.35,
					0.45,
					-0.45,
					-1.35,
					-2.25,
					-3.15};
*/
	// 64 éléments
	/*
	double tilts[16] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double notch[16] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double pos[16] = {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};

	double yP[64]{-18.9, -18.3, -17.7, -17.1, -16.5, -15.9, -15.3, -14.7, -14.1, -13.5, -12.9, -12.3, -11.7, -11.1, -10.5, -9.9, -9.3, -8.7, -8.1, -7.5, -6.9, -6.3, -5.7, -5.1, -4.5, -3.9, -3.3, -2.7,
				-2.1, -1.5, -0.9, -0.3, 0.3, 0.9, 1.5, 2.1, 2.7, 3.3, 3.9, 4.5, 5.1, 5.7, 6.3, 6.9, 7.5, 8.1, 8.7, 9.3, 9.9, 10.5, 11.1, 11.7, 12.3, 12.9, 13.5, 14.1, 14.7, 15.3, 15.9, 16.5, 17.1, 17.7, 18.3, 18.9};
	double xP[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	double zP[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	int i[64] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
	*/

	// Sonde sectorielle 127 éléments
	
	double tilts[16] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double notch[16] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	//double notch[1] = { 30 };
	double pos[16] = {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};

	double yP[127]{0,
0,
0.779423,
0.779423,
1.10218E-16,
-0.779423,
-0.779423,
0,
0.9,
1.55885,
1.8,
1.55885,
0.9,
2.20436E-16,
-0.9,
-1.55885,
-1.8,
-1.55885,
-0.9,
0,
0.923454,
1.73553,
2.33827,
2.65898,
2.65898,
2.33827,
1.73553,
0.923454,
3.30655E-16,
-0.923454,
-1.73553,
-2.33827,
-2.65898,
-2.65898,
-2.33827,
-1.73553,
-0.923454,
0,
0.931749,
1.8,
2.54558,
3.11769,
3.47733,
3.6,
3.47733,
3.11769,
2.54558,
1.8,
0.931749,
4.40873E-16,
-0.931749,
-1.8,
-2.54558,
-3.11769,
-3.47733,
-3.6,
-3.47733,
-3.11769,
-2.54558,
-1.8,
-0.931749,
0,
0.935603,
1.83031,
2.64503,
3.34415,
3.89711,
4.27975,
4.47535,
4.47535,
4.27975,
3.89711,
3.34415,
2.64503,
1.83031,
0.935603,
5.51091E-16,
-0.935603,
-1.83031,
-2.64503,
-3.34415,
-3.89711,
-4.27975,
-4.47535,
-4.47535,
-4.27975,
-3.89711,
-3.34415,
-2.64503,
-1.83031,
-0.935603,
0,
0.9377,
1.84691,
2.7,
3.47105,
4.13664,
4.67654,
5.07434,
5.31796,
5.4,
5.31796,
5.07434,
4.67654,
4.13664,
3.47105,
2.7,
1.84691,
0.9377,
6.61309E-16,
-0.9377,
-1.84691,
-2.7,
-3.47105,
-4.13664,
-4.67654,
-5.07434,
-5.31796,
-5.4,
-5.31796,
-5.07434,
-4.67654,
-4.13664,
-3.47105,
-2.7,
-1.84691,
-0.9377
};

	double xP[127] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	double zP[127] = {0,
0.9,
0.45,
-0.45,
-0.9,
-0.45,
0.45,
1.8,
1.55885,
0.9,
1.10218E-16,
-0.9,
-1.55885,
-1.8,
-1.55885,
-0.9,
-3.30655E-16,
0.9,
1.55885,
2.7,
2.53717,
2.06832,
1.35,
0.46885,
-0.46885,
-1.35,
-2.06832,
-2.53717,
-2.7,
-2.53717,
-2.06832,
-1.35,
-0.46885,
0.46885,
1.35,
2.06832,
2.53717,
3.6,
3.47733,
3.11769,
2.54558,
1.8,
0.931749,
2.20436E-16,
-0.931749,
-1.8,
-2.54558,
-3.11769,
-3.47733,
-3.6,
-3.47733,
-3.11769,
-2.54558,
-1.8,
-0.931749,
-6.61309E-16,
0.931749,
1.8,
2.54558,
3.11769,
3.47733,
4.5,
4.40166,
4.11095,
3.64058,
3.01109,
2.25,
1.39058,
0.470378,
-0.470378,
-1.39058,
-2.25,
-3.01109,
-3.64058,
-4.11095,
-4.40166,
-4.5,
-4.40166,
-4.11095,
-3.64058,
-3.01109,
-2.25,
-1.39058,
-0.470378,
0.470378,
1.39058,
2.25,
3.01109,
3.64058,
4.11095,
4.40166,
5.4,
5.31796,
5.07434,
4.67654,
4.13664,
3.47105,
2.7,
1.84691,
0.9377,
3.30655E-16,
-0.9377,
-1.84691,
-2.7,
-3.47105,
-4.13664,
-4.67654,
-5.07434,
-5.31796,
-5.4,
-5.31796,
-5.07434,
-4.67654,
-4.13664,
-3.47105,
-2.7,
-1.84691,
-0.9377,
-9.91964E-16,
0.9377,
1.84691,
2.7,
3.47105,
4.13664,
4.67654,
5.07434,
5.31796
};

	// 64 éléments lineaire incurvé.
	/*
	double tilts[16] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double notch[16] = {1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
	double pos[16] = {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};
	*/
	/*
	double tilts[1] = {2};
	double notch[1] = {2};
	double pos[1] = {50};

	double yP[64]{-17.8836, -17.3764, -16.8635, -16.3449, -15.821, -15.2919, -14.7577, -14.2186, -13.6749, -13.1266, -12.574, -12.0172, -11.4564, -10.8919, -10.3237, -9.75217,
				-9.17738, -8.59957, -8.01891, -7.4356, -6.84983, -6.2618, -5.6717, -5.07972, -4.48607, -3.89093, -3.2945, -2.69699, -2.09858, -1.49948,
				-0.899888, -0.299996, 0.299996, 0.899888, 1.49948, 2.09858, 2.69699, 3.2945, 3.89093, 4.48607, 5.07972, 5.6717, 6.2618, 6.84983, 7.4356,
				8.01891, 8.59957, 9.17738, 9.75217, 10.3237, 10.8919, 11.4564, 12.0172, 12.574, 13.1266, 13.6749, 14.2186, 14.7577, 15.2919,
				15.821, 16.3449, 16.8635, 17.3764, 17.8836};

	double xP[64] = {5.26594,
					4.94538,
					4.6341,
					4.3322,
					4.03978,
					3.75692,
					3.48374,
					3.22031,
					2.96672,
					2.72307,
					2.48942,
					2.26586,
					2.05246,
					1.84928,
					1.65641,
					1.4739,
					1.3018,
					1.14019,
					0.98911,
					0.848611,
					0.718739,
					0.599539,
					0.49105,
					0.393307,
					0.306343,
					0.230186,
					0.164863,
					0.110393,
					0.0667956,
					0.034085,
					0.012272,
					0.00136363,
					0.00136363,
					0.012272,
					0.034085,
					0.0667956,
					0.110393,
					0.164863,
					0.230186,
					0.306343,
					0.393307,
					0.49105,
					0.599539,
					0.718739,
					0.848611,
					0.98911,
					1.14019,
					1.3018,
					1.4739,
					1.65641,
					1.84928,
					2.05246,
					2.26586,
					2.48942,
					2.72307,
					2.96672,
					3.22031,
					3.48374,
					3.75692,
					4.03978,
					4.3322,
					4.6341,
					4.94538,
					5.26594};

	double zP[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
*/
	int nbElem = 127;
	int nbLaw = 16;
	double matcel = 3230.0;
	double ch = 50;
	int nbPtRemar = 3;
	int aglTy = 0;
	int defTy = 0;
	double barDiam = 500;

	double centerApX = 0;
	double centerApY = 0;
	double centerApZ = 0;

	double *la = (double *)malloc(nbLaw * nbElem * sizeof(double));
	double *xRemarq = (double *)malloc(3 * nbLaw * sizeof(double));
	double *yRemarq = (double *)malloc(3 * nbLaw * sizeof(double));
	double *zRemarq = (double *)malloc(3 * nbLaw * sizeof(double));

	Cbar cbar;
	cbar.Open();

	cbar.Set("Elements.coordinates.x", UNIT_mm, &nbElem, yP);
	cbar.Set("Elements.coordinates.y", UNIT_mm, &nbElem, xP);
	cbar.Set("Elements.Coordinates.z", UNIT_mm, &nbElem, zP);

	cbar.Set("center.aperture.x", UNIT_mm, &centerApX);
	cbar.Set("center.aperture.y", UNIT_mm, &centerApY);
	cbar.Set("center.aperture.z", UNIT_mm, &centerApZ);

	cbar.Set("Targets.Tilts", UNIT_deg, &nbLaw, tilts);
	cbar.Set("Targets.Notche.Angles", UNIT_deg, &nbLaw, notch);
	cbar.Set("Targets.Positions", UNIT_mm, &nbLaw, pos);
	cbar.Set("Material.Velocity", UNIT_mps, &matcel);

	cbar.Set("Defect.Type", UNIT_mm, &defTy);
	cbar.Set("Angle.Type", UNIT_mm, &aglTy);

	cbar.Set("Coupling.Height", UNIT_mm, &ch);
	cbar.Set("diameter", UNIT_mm, &barDiam);

	clock_t timeReq;
	timeReq = clock();
	cbar.ExecSync("Calculate");
	timeReq = clock() - timeReq;

	cbar.Get("laws", UNIT_ns, &nbLaw, &nbElem, la);

	cbar.Get("Paths.x", UNIT_mm, &nbLaw, &nbPtRemar, xRemarq);
	cbar.Get("Paths.y", UNIT_mm, &nbLaw, &nbPtRemar, yRemarq);
	cbar.Get("Paths.z", UNIT_mm, &nbLaw, &nbPtRemar, zRemarq);

	for (int i = 0; i < nbLaw * nbElem; i++)
	{
		//cout << la[i] << endl;
	}

	/*
	for (int i = 2; i < nbLaw * 3; i+=3)
	{
		cout << "x : " << xRemarq[i] << endl;
		cout << "y : " << yRemarq[i] << endl;
	}
	*/

	for (int i = 0; i < nbLaw * 3; i++)
	{
		// cout << "x : " << xRemarq[i] << endl;
		// cout << yRemarq[i] << " ,";
	}

	cout << "temps total : " << ((float)timeReq / CLOCKS_PER_SEC) * 1000 << " ms" << endl;

	cbar.Close();

	free(yRemarq);
	free(xRemarq);
	free(zRemarq);

	free(la);
}
